using System.Text;
using AirportManager.API.DbConnectionFactory.Interfaces;
using AirportManager.API.Helpers;
using AirportManager.API.Repositories.Interfaces;
using Dapper;

namespace AirportManager.API.Repositories.Implementations;

public abstract class GenericRepository<T> : IGenericRepository<T> where T : class
{
    private readonly IDbConnectionFactory _factory;
    private readonly string _tableName = typeof(T).Name.PascalCaseToSnakeCase().Pluralize();

    public GenericRepository(IDbConnectionFactory factory)
    {
        _factory = factory;
        DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    public async Task<IEnumerable<T>> GetAllAsync()
    {
        var query = $"SELECT * FROM {_tableName}";

        var connection = _factory.CreateConnection();

        return await connection.QueryAsync<T>(query);
    }

    public async Task<T?> GetByIdAsync(int id)
    {
        var query = $"SELECT * FROM {_tableName} WHERE id = @id LIMIT 1";

        var connection = _factory.CreateConnection();

        return await connection.QueryFirstOrDefaultAsync<T>(query, new { id });
    }

    public async Task<int> CreateAsync(T entity) => await CreateRecordAsync(entity);

    public async Task<int> CreateAsync(T entity, bool isPkAutoGenerated) => await CreateRecordAsync(entity, isPkAutoGenerated);

    public async Task<int> CreateAsync(T entity, bool isPkAutoGenerated, string pkColumnName) => await CreateRecordAsync(entity, isPkAutoGenerated, pkColumnName);

    public Task UpdateAsync(T entity)
    {
        throw new NotImplementedException();
    }

    public Task DeleteAsync(int id)
    {
        throw new NotImplementedException();
    }

    private async Task<int> CreateRecordAsync(T entity, bool isPkAutoGenerated = true, string pkColumnName = "id")
    {
        if (entity == null)
            throw new ArgumentException("The inserting entity shouldn't be null.");

        var insertQuery = new StringBuilder($"INSERT INTO {_tableName} (");
        var entityProperties = GetProperties();

        var parametersQuery = new StringBuilder();
        var valuesQuery = new StringBuilder();

        foreach (var item in entityProperties)
        {
            var snakeCasedProperty = item.PascalCaseToSnakeCase();
            var matchesPkColumnName = snakeCasedProperty.Equals(pkColumnName.PascalCaseToSnakeCase());

            if (!matchesPkColumnName || (matchesPkColumnName && !isPkAutoGenerated))
            {
                parametersQuery.Append($"{snakeCasedProperty},");
                valuesQuery.Append($"@{item},");
            }
        }

        parametersQuery.Remove(parametersQuery.Length - 1, 1).Append(") VALUES (");
        valuesQuery.Remove(valuesQuery.Length - 1, 1).Append(");");

        insertQuery.Append(parametersQuery).Append(valuesQuery);

        int lastInsertId;
        var connection = _factory.CreateConnection();

        try
        {
            if (isPkAutoGenerated)
            {
                insertQuery.Append("SELECT last_insert_rowid();");
                lastInsertId = await connection.ExecuteScalarAsync<int>(insertQuery.ToString(), entity);
            }
            else
            {
                await connection.ExecuteAsync(insertQuery.ToString(), entity);
                lastInsertId = 0;
            }
        }
        catch
        {
            lastInsertId = -1;
        }

        return lastInsertId;
    }

    private IEnumerable<string> GetProperties()
    {
        var properties = typeof(T).GetProperties().Where(x => !x.GetAccessors()[0].IsVirtual);
        if (!properties.Any())
            throw new Exception("Entity doesn't have any non-virtual properties");

        return properties.Select(x => x.Name);
    }
}